import { VkEventSubscriber } from '../vk-events-publisher/vk-events-publisher';
import { TCallbackMessageNew } from '../vk-events-publisher/vk-callback.types';
import { VkEventContext } from '../vk-events-publisher/vk-event-context';
import { DvachApi } from '../apis/dvach';
import { VkApiAdapterService } from '../vk-api-adapter/vk-api-adapter.service';
import { ImgflipApi } from '../apis/imgflip';
import { VKApi } from 'node-vk-sdk';
import { UsersUserFull } from 'node-vk-sdk/distr/src/generated/Models';

export class MessageHandler implements VkEventSubscriber<TCallbackMessageNew> {
  private readonly phrases: string[];
  private lastPidorTime: number | undefined;
  private lastPidor: UsersUserFull;

  constructor(
    private readonly dvachApi: DvachApi,
    private readonly imgflipApi: ImgflipApi,
    private readonly vkApi: VKApi
  ) {
    this.phrases = [
      '—ç—Ç–∞ —Å—É–∫–∞ —Ö–æ—á–µ—Ç –¥–µ–Ω–µ–≥',
      '–¥–∞ –∫–∞–∫ –∂–µ –≤—ã –¥–æ–µ–±–∞–ª–∏ —É–∂–µ',
      '–Ø –∫–∞–º–µ–Ω—â–∏–∫, —Ä–∞–±–æ—Ç–∞—é —Ç—Ä–∏ –¥–Ω—è, —ã-–∞. –ë–µ–∑ –∑–∞—Ä–ø–ª–∞—Ç—ã, —É-–∞',
      '–í –º–æ–µ–π –º–∞—à–∏–Ω–µ –≤—Å–µ –∂–∏–≤—É—Ç –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É ¬´–≤–æ–¥–∏—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –º—É–∑—ã–∫—É ‚Äî –ø–∞—Å—Å–∞–∂–∏—Ä –ø–æ–º–∞–ª–∫–∏–≤–∞–µ—Ç –≤ —Ç—Ä—è–ø–æ—á–∫—É¬ª',
      '–Ω–∞–µ–±–∞–ª',
      '—É –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –º–∞–∑–¥–æ–≤–æ–¥–∞ —Å—Ç–∞–∫–∞–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–ø–æ–ª–æ–≤–∏–Ω—É –ø—É—Å—Ç –∏–ª–∏ –ø–æ–ª–æ–Ω, —É –Ω–µ–≥–æ –æ–Ω –Ω–∞–ø–æ–ª–æ–≤–∏–Ω—É —Å–≥–Ω–∏–ª',
      '—É —Ç–µ–±—è –≥–æ—Ä–∏—Ç, –ø–∞—Ä–µ–Ω—å, –Ω–µ –æ—Ä–∏',
      '—É –º–µ–Ω—è –≥–æ—Ä–∏—Ç ‚Äî —ç—Ç–æ –≥–∞–±–∞—Ä–∏—Ç',
      '–≤—ã —Ö–æ–¥–∏—Ç–µ –ø–æ –æ—Ö—É–µ–Ω–Ω–æ —Ç–æ–Ω–∫–æ–º—É –ª—å–¥—É',
      '–ù–∞–∏–±–æ–ª—å—à—É—é –æ–ø–∞—Å–Ω–æ—Å—Ç—å –Ω–∞ –¥–æ—Ä–æ–≥–∞—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –º–∞—à–∏–Ω–∞, –∫–æ—Ç–æ—Ä–∞—è –µ–¥–µ—Ç –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º —Å–ø–æ—Å–æ–±–µ–Ω –¥—É–º–∞—Ç—å –µ–µ –≤–æ–¥–∏—Ç–µ–ª—å',
      '–Ø –≤ –∂–∏–∑–Ω–∏ –Ω–µ–Ω–∞–≤–∏–∂—É –≤—Å–µ–≥–æ –ª–∏—à—å –¥–≤–µ –≤–µ—â–∏: —Ä–∞—Å–∏–∑–º –∏‚Ä¶ –Ω–µ–≥—Ä–æ–≤',
      '–†–∞-—Ç–∞-—Ç–∞-—Ç–∞-—Ç–∞, –¥–∞, —Å—É–∫–∞, –Ω–æ–≤—ã–π –∞–≤—Ç–æ–º–∞—Ç',
      '—ç—Ç–∞ —Å—É–∫–∞ —Ö–æ—á–µ—Ç —Å–µ–∫—Å–∞, —è –Ω–µ –¥–∞–º',
      '–ø–æ—Å–æ—Å–∏',
      '–Ω–µ –ø–∏—à–∏ —Å—é–¥–∞, –æ—Ç —Ç–µ–±—è –≥–∞–≤–Ω–æ–π –≤–æ–Ω—è–µ—Ç',
      '—Ç—ã –º–æ–π –∫—Ä–∞—à',
      '–õ—É—á—à–µ –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º –≤ –¥–æ—Ä–æ–∂–Ω–æ–π –ø—Ä–æ–±–∫–µ, —á–µ–º –ø–µ—Ä–≤—ã–º –≤ –ø–æ—Ö–æ—Ä–æ–Ω–Ω–æ–º –∫–æ—Ä—Ç–µ–∂–µ',
      '–ù–æ–≤–∞—è –º–∞—à–∏–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç —Å–ª—É–∂–∏—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–º —Ç–æ–≥–æ, —Å–∫–æ–ª—å–∫–æ —É –≤–∞—Å –¥–µ–Ω–µ–≥, –Ω–æ –º–æ–∂–µ—Ç —Å–ª—É–∂–∏—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–º —Ç–æ–≥–æ, —Å–∫–æ–ª—å–∫–æ –≤—ã –¥–æ–ª–∂–Ω—ã',
      '–ù–µ –µ–∑–¥–∏ –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º –º–æ–∂–µ—Ç –ª–µ—Ç–∞—Ç—å —Ç–≤–æ–π –∞–Ω–≥–µ–ª-—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å!',
      '–í–µ–¥–∏ –º–∞—à–∏–Ω—É –Ω–µ —Ç–∞–∫, —Å–ª–æ–≤–Ω–æ —Ç–µ–±–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —É–ª–∏—Ü–∞, –∞ —Ç–∞–∫, —Å–ª–æ–≤–Ω–æ —Ç–µ–±–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –º–∞—à–∏–Ω–∞',
      '–ü–æ–º–Ω–∏: —Ç—ã —è–≤–∏–ª—Å—è –Ω–∞ —Å–≤–µ—Ç –±–µ–∑ –∑–∞–ø–∞—Å–Ω—ã—Ö —á–∞—Å—Ç–µ–π',
      '–í –ª—é–±–æ–π –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –ª–æ–∂–∏—Å—å —Å–ø–∞—Ç—å',
      '–ß–µ–º –¥–æ–ª—å—à–µ —Ç—ã –±—É–¥–µ—à—å –∂–¥–∞—Ç—å, —Ç–µ–º –±–æ–ª—å—à–µ –¥–Ω–µ–π —Ç—ã –ø–æ—Ç–µ—Ä—è–µ—à—å –Ω–∞–≤—Å–µ–≥–¥–∞',

    ];
  }

  async update(context: VkEventContext, event: TCallbackMessageNew) {
    const rand = Math.floor(Math.random() * 23);
    // const rand = 25;
    if (rand === 5) {
      console.log(event);
      const r = await context.reply(this.phrases[Math.floor(Math.random() * this.phrases.length)], event, true);
      console.log(r);
      return;
    }

    if (event.message.text === '/–¥–µ–º–±–µ–ª—å') {
      const r = await context.reply('–í–∞—Å–µ –æ—Å—Ç–∞–ª–æ—Å—å —Å–ª—É–∂–∏—Ç—å –µ—â–µ –≥–æ–¥–∏–∫', event, true);
      console.log(r);
      return;
    }

    if (/–º–∞–∑–¥–∞/i.test(event.message.text)) {
      try {
        const res = await this.vkApi.messagesRemoveChatUser({
          chat_id: Number(event.message.peer_id) - 2000000000,
          user_id: event.message.from_id
        })
      } catch (e) {
        console.error(e);
        await context.reply('–Ω—É –∏ —Ö—É–π–Ω—è', event);
      }
      await context.reply('–ø–æ–ª—É—á–∞–π –≤ –∂–±–∞–Ω, –≥–Ω–∏–ª–æ–µ–±', event);
      return;
    }

    if (/\/pidordaily/.test(event.message.text)) {
      if (this.lastPidorTime && Date.now() - this.lastPidorTime < 1000 * 60 * 60 * 24) {
        context.reply('–†–∞–Ω–æ–≤–∞—Ç–æ –±—É–¥–µ—Ç', event);
        return;
      }
      const { profiles } = await this.vkApi.messagesGetConversationMembers({
        peer_id: event.message.peer_id,
      });
      this.lastPidor = profiles[Math.floor(Math.random() * profiles.length)];
      this.lastPidorTime = Date.now();
      setTimeout(() => {
        context.reply('ü§ñü§ñ–ê–Ω–∞–ª—å–Ω–æ–µ –∑–æ–Ω–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æüëÄüëÄ', event);
      }, 0);
      setTimeout(() => {
        context.reply('üê∏üê∏–û–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞—Ä–±–æ–¥–µ–¥–æ–≤ –Ω–∞ –∫–ª–∞–¥–±–∏—â–µ‚Åâ‚Åâ', event);
      }, 3000);
      setTimeout(() => {
        context.reply('‚ö†‚ö†–ó–∞—à–ª–∏ –≤ –∫–ª—É–± —à–æ—Ä—Ç –¥–∏–≥–ª–æ–≤, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Å—Ç–∏ –æ–ø—Ä–æ—ÅüÜòüÜò', event);
      }, 6000);
      setTimeout(() => {
        context.reply('‚è≤‚è≤–ö—Ä—É—Ç–∏–º –≤—Ç–µ–∫ –¥–æ —Å—Ä–∞–∫–∏üëØ‚Äç‚ôÇüëØ‚Äç‚ôÇ', event);
      }, 9000);
      setTimeout(() => {
        context.reply('üíâüíâ–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º —á—å—é-—Ç–æ —Å–ø–µ—Ä–º—É —á–µ—Ä–µ–∑ –ø—Ä–∏–∑–º—É –±—ã—Ç–∏—è‚ùì‚ùì', event);
      }, 12000);
      setTimeout(() => {
        context.reply('üíäüíä–¢—Ä–µ–±—É–µ–º —Ñ—É–ª —Ä–µ–±–∏–ª–¥ –∫–æ–ø–µ–π–∫–∏üîûüîû', event);
      }, 16000);
      setTimeout(() => {
        context.reply('üåöüåö–ó–∞—Ö–æ–¥–∏–º –Ω–∞ —Ñ–æ—Ä—É–º –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —Ä–±20üåàüåà', event);
      }, 20000);
      setTimeout(() => {
        context.reply('üí¶üí¶–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏—Ç—É—Ö–∏ –æ—á–∫–∞üí´üí´', event);
      }, 24000);
      setTimeout(() => {
        context.reply('‚ò¢‚ò¢–ï—Å—Ç—å –ø—Ä–æ–±–∏—Ç–∏–µ!üí•üí•', event);
      }, 28000);
      setTimeout(() => {
        context.reply(`ü•áü•á–ê —Å–∞–º—ã–π –≥—Ä—è–∑–Ω—ã–π –ø–∏–¥–æ—Ä –¥–Ω—è —Å–µ–≥–æ–¥–Ω—è ${this.lastPidor.first_name} ${this.lastPidor.last_name} @id${this.lastPidor.id} üèÖüèÖ`, event);
      }, 32000);
      return;
    }

    if (/\/lastpidor/.test(event.message.text)) {
      context.reply(`–ï—Å–ª–∏ —Ç—ã –∑–∞–±—ã–ª —á—å—è –∂–æ–ø–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–∞ –ø—Ä–∏—Ü–µ–ª–µ, —Ç–æ —è —Ç–µ–±–µ —Å–∫–∞–∂—É, —ç—Ç–æ @id${this.lastPidor.id}`, event);
    }


    if (/\/2ch/.test(event.message.text)) {
      const table = event.message.text.split(' ');
      if (!table[1]) {
        await context.reply('–ò—Å–ø–æ–ª—å–∑—É–π: /2ch table', event, true);
        return;
      }

      const res = await this.dvachApi.getCatalogNum(table[1].trim());

      if (!res) {
        await context.reply('–¢–∞–∫–æ–≥–æ —Ç—Ä–µ–¥–∞ –Ω–µ—Ç', event, true);
      }

      const rnd = Math.floor(Math.random() * res.threads.length);

      const thread = res.threads[rnd];
      // let filesStr: string[] = [];
      //
      // if (thread && thread.files_count > 0 && thread.files) {
      //   const server = await context.vkApi.getMessageUploadServer(event.message.peer_id.toString());
      //   let i = 0;
      //   for (const file of thread.files) {
      //     if (file.name.endsWith('.jpg')) {
      //       const image = await this.dvachApi.getImage(file.path);
      //       const fileName = `2ch_${rnd}_${i++}.jpg`;
      //       fs.writeFileSync(fileName, image, 'binary');
      //
      //       const uploadedImg = await context.vkApi.postUploadImage(server.response.upload_url, fileName);
      //
      //       if (uploadedImg.photo) {
      //         const photo = await context.vkApi.saveMessagesPhoto({
      //           ...uploadedImg,
      //         });
      //         filesStr.push(photo);
      //       } else {
      //         await context.reply('–í–∫ –Ω–µ –≥—Ä—É–∑–∏—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É(', event, true);
      //       }
      //       fs.unlink(fileName, (err: any) => {
      //         if (err) {
      //           console.log(err);
      //           console.log('file deleted')
      //         }
      //       })
      //     }
      //   }
      // }
      // await ctx.reply(thread.comment, filesStr.join(','));
      await context.reply(thread.comment, event, true);
      return;
    }
  }

  public async generateMeme(texts: string[], peer_id: number, vkApi: VkApiAdapterService) {
    const resp = await this.imgflipApi.getMemes();
    if (resp.success) {
      const filtered = resp.data.memes.filter((i) => i.box_count === texts.length);
      if (filtered.length > 0) {
        let rnd = Math.floor(Math.random() * filtered.length);
        let random_id = filtered[rnd].id;

        const image = await this.imgflipApi.captionImage(random_id, texts);

        if (image.success) {
          await ImgflipApi.saveImg(image.data.url, 'meme.jpg');
          const uploadServer = await vkApi.getMessageUploadServer(peer_id.toString());
          const uploaded = await vkApi.postUploadImage(uploadServer.response.upload_url, 'meme.jpg');

          const photo = await vkApi.saveMessagesPhoto({
            photo: uploaded.photo,
            server: uploaded.server,
            hash: uploaded.hash,
          });

          // @ts-ignore
          console.log('photo' + photo.response[0].owner_id + '_' + photo.response[0].id)
        } else {
          console.error(image);
        }
      }
    } else {
      console.error(resp);
    }
  }
}
